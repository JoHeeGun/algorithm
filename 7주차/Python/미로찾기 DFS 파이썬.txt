from sys import stdin
from collections import deque


n, m = map(int, stdin.readline().split())

new_maze = []

for _ in range(n):
    new_maze.append([int(x) for x in stdin.readline().rstrip()])

shortest = [[0] * m for _ in range(n)]
shortest[0][0] = 1


def get_distance(maze, end_r, end_c, dist):
    queue = deque()
    queue.append((0, 0))

    dist[0][0] = 1

    while queue:
        r, c = queue.popleft()

        if r < end_r:
            if maze[r + 1][c] == 1 and dist[r + 1][c] == 0:
                dist[r + 1][c] = dist[r][c] + 1
                queue.append((r + 1, c))

        if c < end_c:
            if maze[r][c + 1] == 1 and dist[r][c + 1] == 0:
                dist[r][c + 1] = dist[r][c] + 1
                queue.append((r, c + 1))

        if r > 0:
            if maze[r - 1][c] == 1 and dist[r - 1][c] == 0:
                dist[r - 1][c] = dist[r][c] + 1
                queue.append((r - 1, c))

        if c > 0:
            if maze[r][c - 1] == 1 and dist[r][c - 1] == 0:
                dist[r][c - 1] = dist[r][c] + 1
                queue.append((r, c - 1))

    return dist[end_r][end_c]


distance = get_distance(new_maze, n - 1, m - 1, shortest)
print(distance)